// Generated by FUECCode.verilog_module
/* verilator lint_off DECLFILENAME */
/* verilator lint_off UNUSEDSIGNAL */
module fuec_decoder_48_32 (
    input  wire [47:0] r,
    output wire [15:0] s,
    output wire [47:0] r_fix,
    output wire [31:0] pos_error,
    output wire        no_error,
    output wire        corrected,
    output wire        uncorrectable
);

    // Parity-check matrix rows HROWj (bit i true means r[i] participates in s[j])
    localparam [47:0] HROW0 = 48'b000000000000000111101100110111111111000100010010;
    localparam [47:0] HROW1 = 48'b000000000000001001100000001101001000010101111101;
    localparam [47:0] HROW2 = 48'b000000000000010011000110100001010100100001111000;
    localparam [47:0] HROW3 = 48'b000000000000100001000000110010000010111110100000;
    localparam [47:0] HROW4 = 48'b000000000001000000101001101101100001101110001101;
    localparam [47:0] HROW5 = 48'b000000000010000011000111110000010101001110010110;
    localparam [47:0] HROW6 = 48'b000000000100000010100011110001100000111111011101;
    localparam [47:0] HROW7 = 48'b000000001000000000101001101001111111110010110001;
    localparam [47:0] HROW8 = 48'b000000010000000010111110111101110010100011010111;
    localparam [47:0] HROW9 = 48'b000000100000000001100101100000010010011111000001;
    localparam [47:0] HROW10 = 48'b000001000000000000010100110011011100111010011100;
    localparam [47:0] HROW11 = 48'b000010000000000001001010111101100011010100001101;
    localparam [47:0] HROW12 = 48'b000100000000000011110110011101010111000011101001;
    localparam [47:0] HROW13 = 48'b001000000000000000101110110001100101000010000100;
    localparam [47:0] HROW14 = 48'b010000000000000000001111110000001101001011100001;
    localparam [47:0] HROW15 = 48'b100000000000000000111110101011000110110001100010;

    // Syndrome computation s[j] = ^(r & HROWj)
    assign s[0] = ^(r & HROW0);
    assign s[1] = ^(r & HROW1);
    assign s[2] = ^(r & HROW2);
    assign s[3] = ^(r & HROW3);
    assign s[4] = ^(r & HROW4);
    assign s[5] = ^(r & HROW5);
    assign s[6] = ^(r & HROW6);
    assign s[7] = ^(r & HROW7);
    assign s[8] = ^(r & HROW8);
    assign s[9] = ^(r & HROW9);
    assign s[10] = ^(r & HROW10);
    assign s[11] = ^(r & HROW11);
    assign s[12] = ^(r & HROW12);
    assign s[13] = ^(r & HROW13);
    assign s[14] = ^(r & HROW14);
    assign s[15] = ^(r & HROW15);

    // Selectors for correctable patterns (XNOR equality: &(s ^~ SVAL))
    localparam [15:0] SVAL_sel_e_32 = 16'b0000000000000001;  wire sel_e_32 = &(s ^~ SVAL_sel_e_32);  // e=(32,)
    localparam [15:0] SVAL_sel_e_33 = 16'b0000000000000010;  wire sel_e_33 = &(s ^~ SVAL_sel_e_33);  // e=(33,)
    localparam [15:0] SVAL_sel_e_34 = 16'b0000000000000100;  wire sel_e_34 = &(s ^~ SVAL_sel_e_34);  // e=(34,)
    localparam [15:0] SVAL_sel_e_35 = 16'b0000000000001000;  wire sel_e_35 = &(s ^~ SVAL_sel_e_35);  // e=(35,)
    localparam [15:0] SVAL_sel_e_36 = 16'b0000000000010000;  wire sel_e_36 = &(s ^~ SVAL_sel_e_36);  // e=(36,)
    localparam [15:0] SVAL_sel_e_37 = 16'b0000000000100000;  wire sel_e_37 = &(s ^~ SVAL_sel_e_37);  // e=(37,)
    localparam [15:0] SVAL_sel_e_38 = 16'b0000000001000000;  wire sel_e_38 = &(s ^~ SVAL_sel_e_38);  // e=(38,)
    localparam [15:0] SVAL_sel_e_39 = 16'b0000000010000000;  wire sel_e_39 = &(s ^~ SVAL_sel_e_39);  // e=(39,)
    localparam [15:0] SVAL_sel_e_40 = 16'b0000000100000000;  wire sel_e_40 = &(s ^~ SVAL_sel_e_40);  // e=(40,)
    localparam [15:0] SVAL_sel_e_41 = 16'b0000001000000000;  wire sel_e_41 = &(s ^~ SVAL_sel_e_41);  // e=(41,)
    localparam [15:0] SVAL_sel_e_42 = 16'b0000010000000000;  wire sel_e_42 = &(s ^~ SVAL_sel_e_42);  // e=(42,)
    localparam [15:0] SVAL_sel_e_4 = 16'b0000010111100111;  wire sel_e_4 = &(s ^~ SVAL_sel_e_4);  // e=(4,)
    localparam [15:0] SVAL_sel_e_43 = 16'b0000100000000000;  wire sel_e_43 = &(s ^~ SVAL_sel_e_43);  // e=(43,)
    localparam [15:0] SVAL_sel_e_8 = 16'b0000101001111011;  wire sel_e_8 = &(s ^~ SVAL_sel_e_8);  // e=(8,)
    localparam [15:0] SVAL_sel_e_44 = 16'b0001000000000000;  wire sel_e_44 = &(s ^~ SVAL_sel_e_44);  // e=(44,)
    localparam [15:0] SVAL_sel_e_31 = 16'b0001000101100101;  wire sel_e_31 = &(s ^~ SVAL_sel_e_31);  // e=(31,)
    localparam [15:0] SVAL_sel_e_16 = 16'b0001011110100101;  wire sel_e_16 = &(s ^~ SVAL_sel_e_16);  // e=(16,)
    localparam [15:0] SVAL_sel_e_20 = 16'b0001100100010011;  wire sel_e_20 = &(s ^~ SVAL_sel_e_20);  // e=(20,)
    localparam [15:0] SVAL_sel_e_30 = 16'b0001101000101111;  wire sel_e_30 = &(s ^~ SVAL_sel_e_30);  // e=(30,)
    localparam [15:0] SVAL_sel_e_3 = 16'b0001110001010110;  wire sel_e_3 = &(s ^~ SVAL_sel_e_3);  // e=(3,)
    localparam [15:0] SVAL_sel_e_45 = 16'b0010000000000000;  wire sel_e_45 = &(s ^~ SVAL_sel_e_45);  // e=(45,)
    localparam [15:0] SVAL_sel_e_17 = 16'b0010100111010001;  wire sel_e_17 = &(s ^~ SVAL_sel_e_17);  // e=(17,)
    localparam [15:0] SVAL_sel_e_2 = 16'b0010110101110010;  wire sel_e_2 = &(s ^~ SVAL_sel_e_2);  // e=(2,)
    localparam [15:0] SVAL_sel_e_46 = 16'b0100000000000000;  wire sel_e_46 = &(s ^~ SVAL_sel_e_46);  // e=(46,)
    localparam [15:0] SVAL_sel_e_24 = 16'b0100001011110000;  wire sel_e_24 = &(s ^~ SVAL_sel_e_24);  // e=(24,)
    localparam [15:0] SVAL_sel_e_15 = 16'b0100010010000011;  wire sel_e_15 = &(s ^~ SVAL_sel_e_15);  // e=(15,)
    localparam [15:0] SVAL_sel_e_9 = 16'b0100011001111000;  wire sel_e_9 = &(s ^~ SVAL_sel_e_9);  // e=(9,)
    localparam [15:0] SVAL_sel_e_0 = 16'b0101101111010010;  wire sel_e_0 = &(s ^~ SVAL_sel_e_0);  // e=(0,)
    localparam [15:0] SVAL_sel_e_7 = 16'b0111011111111000;  wire sel_e_7 = &(s ^~ SVAL_sel_e_7);  // e=(7,)
    localparam [15:0] SVAL_sel_e_12 = 16'b0111100010110001;  wire sel_e_12 = &(s ^~ SVAL_sel_e_12);  // e=(12,)
    localparam [15:0] SVAL_sel_e_22 = 16'b0111110101101001;  wire sel_e_22 = &(s ^~ SVAL_sel_e_22);  // e=(22,)
    localparam [15:0] SVAL_sel_e_47 = 16'b1000000000000000;  wire sel_e_47 = &(s ^~ SVAL_sel_e_47);  // e=(47,)
    localparam [15:0] SVAL_sel_e_1 = 16'b1000000100100001;  wire sel_e_1 = &(s ^~ SVAL_sel_e_1);  // e=(1,)
    localparam [15:0] SVAL_sel_e_19 = 16'b1000010000001001;  wire sel_e_19 = &(s ^~ SVAL_sel_e_19);  // e=(19,)
    localparam [15:0] SVAL_sel_e_11 = 16'b1000010111011100;  wire sel_e_11 = &(s ^~ SVAL_sel_e_11);  // e=(11,)
    localparam [15:0] SVAL_sel_e_10 = 16'b1000111011001010;  wire sel_e_10 = &(s ^~ SVAL_sel_e_10);  // e=(10,)
    localparam [15:0] SVAL_sel_e_28 = 16'b1001010100000000;  wire sel_e_28 = &(s ^~ SVAL_sel_e_28);  // e=(28,)
    localparam [15:0] SVAL_sel_e_21 = 16'b1001100110010010;  wire sel_e_21 = &(s ^~ SVAL_sel_e_21);  // e=(21,)
    localparam [15:0] SVAL_sel_e_13 = 16'b1001101110001001;  wire sel_e_13 = &(s ^~ SVAL_sel_e_13);  // e=(13,)
    localparam [15:0] SVAL_sel_e_29 = 16'b1011001111010011;  wire sel_e_29 = &(s ^~ SVAL_sel_e_29);  // e=(29,)
    localparam [15:0] SVAL_sel_e_18 = 16'b1011110111010111;  wire sel_e_18 = &(s ^~ SVAL_sel_e_18);  // e=(18,)
    localparam [15:0] SVAL_sel_e_5 = 16'b1101000010001110;  wire sel_e_5 = &(s ^~ SVAL_sel_e_5);  // e=(5,)
    localparam [15:0] SVAL_sel_e_6 = 16'b1101001101000110;  wire sel_e_6 = &(s ^~ SVAL_sel_e_6);  // e=(6,)
    localparam [15:0] SVAL_sel_e_27 = 16'b1110100110010001;  wire sel_e_27 = &(s ^~ SVAL_sel_e_27);  // e=(27,)
    localparam [15:0] SVAL_sel_e_23 = 16'b1110111111111101;  wire sel_e_23 = &(s ^~ SVAL_sel_e_23);  // e=(23,)
    localparam [15:0] SVAL_sel_e_14 = 16'b1111010010100101;  wire sel_e_14 = &(s ^~ SVAL_sel_e_14);  // e=(14,)
    localparam [15:0] SVAL_sel_e_26 = 16'b1111011100100101;  wire sel_e_26 = &(s ^~ SVAL_sel_e_26);  // e=(26,)
    localparam [15:0] SVAL_sel_e_25 = 16'b1111100101100100;  wire sel_e_25 = &(s ^~ SVAL_sel_e_25);  // e=(25,)

    // Flip signals per bit and corrected output
    wire flip_0 = sel_e_0;
    wire flip_1 = sel_e_1;
    wire flip_2 = sel_e_2;
    wire flip_3 = sel_e_3;
    wire flip_4 = sel_e_4;
    wire flip_5 = sel_e_5;
    wire flip_6 = sel_e_6;
    wire flip_7 = sel_e_7;
    wire flip_8 = sel_e_8;
    wire flip_9 = sel_e_9;
    wire flip_10 = sel_e_10;
    wire flip_11 = sel_e_11;
    wire flip_12 = sel_e_12;
    wire flip_13 = sel_e_13;
    wire flip_14 = sel_e_14;
    wire flip_15 = sel_e_15;
    wire flip_16 = sel_e_16;
    wire flip_17 = sel_e_17;
    wire flip_18 = sel_e_18;
    wire flip_19 = sel_e_19;
    wire flip_20 = sel_e_20;
    wire flip_21 = sel_e_21;
    wire flip_22 = sel_e_22;
    wire flip_23 = sel_e_23;
    wire flip_24 = sel_e_24;
    wire flip_25 = sel_e_25;
    wire flip_26 = sel_e_26;
    wire flip_27 = sel_e_27;
    wire flip_28 = sel_e_28;
    wire flip_29 = sel_e_29;
    wire flip_30 = sel_e_30;
    wire flip_31 = sel_e_31;
    wire flip_32 = sel_e_32;
    wire flip_33 = sel_e_33;
    wire flip_34 = sel_e_34;
    wire flip_35 = sel_e_35;
    wire flip_36 = sel_e_36;
    wire flip_37 = sel_e_37;
    wire flip_38 = sel_e_38;
    wire flip_39 = sel_e_39;
    wire flip_40 = sel_e_40;
    wire flip_41 = sel_e_41;
    wire flip_42 = sel_e_42;
    wire flip_43 = sel_e_43;
    wire flip_44 = sel_e_44;
    wire flip_45 = sel_e_45;
    wire flip_46 = sel_e_46;
    wire flip_47 = sel_e_47;
    assign r_fix[0] = r[0] ^ flip_0;
    assign r_fix[1] = r[1] ^ flip_1;
    assign r_fix[2] = r[2] ^ flip_2;
    assign r_fix[3] = r[3] ^ flip_3;
    assign r_fix[4] = r[4] ^ flip_4;
    assign r_fix[5] = r[5] ^ flip_5;
    assign r_fix[6] = r[6] ^ flip_6;
    assign r_fix[7] = r[7] ^ flip_7;
    assign r_fix[8] = r[8] ^ flip_8;
    assign r_fix[9] = r[9] ^ flip_9;
    assign r_fix[10] = r[10] ^ flip_10;
    assign r_fix[11] = r[11] ^ flip_11;
    assign r_fix[12] = r[12] ^ flip_12;
    assign r_fix[13] = r[13] ^ flip_13;
    assign r_fix[14] = r[14] ^ flip_14;
    assign r_fix[15] = r[15] ^ flip_15;
    assign r_fix[16] = r[16] ^ flip_16;
    assign r_fix[17] = r[17] ^ flip_17;
    assign r_fix[18] = r[18] ^ flip_18;
    assign r_fix[19] = r[19] ^ flip_19;
    assign r_fix[20] = r[20] ^ flip_20;
    assign r_fix[21] = r[21] ^ flip_21;
    assign r_fix[22] = r[22] ^ flip_22;
    assign r_fix[23] = r[23] ^ flip_23;
    assign r_fix[24] = r[24] ^ flip_24;
    assign r_fix[25] = r[25] ^ flip_25;
    assign r_fix[26] = r[26] ^ flip_26;
    assign r_fix[27] = r[27] ^ flip_27;
    assign r_fix[28] = r[28] ^ flip_28;
    assign r_fix[29] = r[29] ^ flip_29;
    assign r_fix[30] = r[30] ^ flip_30;
    assign r_fix[31] = r[31] ^ flip_31;
    assign r_fix[32] = r[32] ^ flip_32;
    assign r_fix[33] = r[33] ^ flip_33;
    assign r_fix[34] = r[34] ^ flip_34;
    assign r_fix[35] = r[35] ^ flip_35;
    assign r_fix[36] = r[36] ^ flip_36;
    assign r_fix[37] = r[37] ^ flip_37;
    assign r_fix[38] = r[38] ^ flip_38;
    assign r_fix[39] = r[39] ^ flip_39;
    assign r_fix[40] = r[40] ^ flip_40;
    assign r_fix[41] = r[41] ^ flip_41;
    assign r_fix[42] = r[42] ^ flip_42;
    assign r_fix[43] = r[43] ^ flip_43;
    assign r_fix[44] = r[44] ^ flip_44;
    assign r_fix[45] = r[45] ^ flip_45;
    assign r_fix[46] = r[46] ^ flip_46;
    assign r_fix[47] = r[47] ^ flip_47;

    assign pos_error[0] = flip_0;
    assign pos_error[1] = flip_1;
    assign pos_error[2] = flip_2;
    assign pos_error[3] = flip_3;
    assign pos_error[4] = flip_4;
    assign pos_error[5] = flip_5;
    assign pos_error[6] = flip_6;
    assign pos_error[7] = flip_7;
    assign pos_error[8] = flip_8;
    assign pos_error[9] = flip_9;
    assign pos_error[10] = flip_10;
    assign pos_error[11] = flip_11;
    assign pos_error[12] = flip_12;
    assign pos_error[13] = flip_13;
    assign pos_error[14] = flip_14;
    assign pos_error[15] = flip_15;
    assign pos_error[16] = flip_16;
    assign pos_error[17] = flip_17;
    assign pos_error[18] = flip_18;
    assign pos_error[19] = flip_19;
    assign pos_error[20] = flip_20;
    assign pos_error[21] = flip_21;
    assign pos_error[22] = flip_22;
    assign pos_error[23] = flip_23;
    assign pos_error[24] = flip_24;
    assign pos_error[25] = flip_25;
    assign pos_error[26] = flip_26;
    assign pos_error[27] = flip_27;
    assign pos_error[28] = flip_28;
    assign pos_error[29] = flip_29;
    assign pos_error[30] = flip_30;
    assign pos_error[31] = flip_31;

    // Status flags
    assign no_error = ~(|s);
    wire any_selector = sel_e_32 | sel_e_33 | sel_e_34 | sel_e_35 | sel_e_36 | sel_e_37 | sel_e_38 | sel_e_39 | sel_e_40 | sel_e_41 | sel_e_42 | sel_e_4 | sel_e_43 | sel_e_8 | sel_e_44 | sel_e_31 | sel_e_16 | sel_e_20 | sel_e_30 | sel_e_3 | sel_e_45 | sel_e_17 | sel_e_2 | sel_e_46 | sel_e_24 | sel_e_15 | sel_e_9 | sel_e_0 | sel_e_7 | sel_e_12 | sel_e_22 | sel_e_47 | sel_e_1 | sel_e_19 | sel_e_11 | sel_e_10 | sel_e_28 | sel_e_21 | sel_e_13 | sel_e_29 | sel_e_18 | sel_e_5 | sel_e_6 | sel_e_27 | sel_e_23 | sel_e_14 | sel_e_26 | sel_e_25;
    assign corrected = any_selector;
    assign uncorrectable = (|s) & ~any_selector;

endmodule
